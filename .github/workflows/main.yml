# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tiny-url           # set this to your Amazon ECR repository name
  ECS_SERVICE: tiny-url-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: my-tiny-url                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./.github/workflows/my-tiny-url-revision.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: golang-app           # set this to the name of the container in the
  # migrate
  ECS_TASK_DEFINITION_MIGRATE: ./.github/workflows/my-tiny-url-migrate-revision.json # set this to the path to your Amazon ECS task definition
  ECR_REPOSITORY_MIGRATE: tiny-url-migrate          # set this to your Amazon ECR repository name
  CONTAINER_NAME_MIGRATE: migration           # set this to the name of the container in the
  SUBNET_ID: subnet-0a41df28dc054b461
  SG_ID: sg-0957449da66838464

permissions:
  id-token: write
  contents: read

jobs:
  migration:
    name: Run migration
    runs-on: ubuntu-latest
    # mysql/schema.sql に変更があるときのみ実行
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR tiny-url
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # マイグレーションコンテナをビルドし、ECRにプッシュ
    - name: Build, tag, and push migration image to Amazon ECR (tiny-url-migrate)
      id: build-image
      env:
        MIGRATION_IMAGE_TAG: migrate-${{ github.sha }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build --no-cache -f Dockerfile-migrate -t $ECR_REGISTRY/$ECR_REPOSITORY_MIGRATE:$MIGRATION_IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_MIGRATE:$MIGRATION_IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_MIGRATE:$MIGRATION_IMAGE_TAG" >> $GITHUB_OUTPUT

    # migration task definition に新しいイメージIDを埋め込む
    - name: Fill in the new image ID in the Amazon ECS task definition tiny-url-migrate
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_MIGRATE }}
        container-name: ${{ env.CONTAINER_NAME_MIGRATE }}
        image: ${{ steps.build-image.outputs.image }}

    # マイグレーションタスクを実行
    - name: Run migration task on Amazon ECS (tiny-url-migrate)
      run: |
        MIGRATION_TASK_ARN=$(aws ecs run-task \
          --cluster my-tiny-url \
          --task-definition arn:aws:ecs:ap-northeast-1:709139818723:task-definition/my-tiny-url-migration:1 \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-0a41df28dc054b461],securityGroups=[sg-0957449da66838464],assignPublicIp=ENABLED}" \
          --query "tasks[0].taskArn" \
          --output text)
        echo "MIGRATION_TASK_ARN=$MIGRATION_TASK_ARN" >> $GITHUB_ENV

    # マイグレーションタスクの完了を待つ
    - name: Wait for migration task to complete
      run: |
        aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks $MIGRATION_TASK_ARN

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: always()      # これを入れておかないと migration job が skip されたときに deploy job が実行されない
    needs: migration  # migrationジョブの完了を待つ
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR tiny-url
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR tiny-url
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition tiny-url
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition tiny-url
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
