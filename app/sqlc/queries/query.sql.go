// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execresult

INSERT INTO urls ( original_url, tiny_url ) VALUES ( ?, ? )
`

type CreateAuthorParams struct {
	OriginalUrl string
	TinyUrl     string
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.OriginalUrl, arg.TinyUrl)
}

const getTinyURL = `-- name: GetTinyURL :one

SELECT original_url, tiny_url, created_at FROM urls WHERE original_url = ? LIMIT 1
`

func (q *Queries) GetTinyURL(ctx context.Context, originalUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getTinyURL, originalUrl)
	var i Url
	err := row.Scan(&i.OriginalUrl, &i.TinyUrl, &i.CreatedAt)
	return i, err
}

const listOriginalURL = `-- name: ListOriginalURL :many

SELECT original_url, tiny_url, created_at FROM urls ORDER BY original_url
`

func (q *Queries) ListOriginalURL(ctx context.Context) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, listOriginalURL)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.OriginalUrl, &i.TinyUrl, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
